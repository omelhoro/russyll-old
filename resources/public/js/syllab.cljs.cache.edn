;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name syllab, :imports nil, :requires {str clojure.string, clojure.string clojure.string, ling-data ling-data, orphoep orphoep, globals globals, translit translit}, :uses {onset-sm4 ling-data, orpho-single orphoep, -- orphoep, translit translit, onset-index ling-data, sformat globals, ++ orphoep}, :defs {sm5 {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 72, :column 7, :end-line 72, :end-column 10, :arglists (quote ([comp-m [v c]]))}, :name syllab/sm5, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 10, :method-params ([comp-m p__7653]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp-m [v c]]))}, syll-single {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 109, :column 17, :end-line 109, :end-column 28, :export true, :arglists (quote ([word]))}, :name syllab/syll-single, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 28, :method-params ([word]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, syll-single-sys {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 105, :column 16, :end-line 105, :end-column 31, :export true, :arglists (quote ([sys word]))}, :name syllab/syll-single-sys, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 31, :method-params ([sys word]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sys word]))}, concluster-pat {:name syllab/concluster-pat, :file "target/classes/cljs/syllab.cljs", :line 10, :column 1, :end-line 10, :end-column 20, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 10, :column 6, :end-line 10, :end-column 20}}, cluster-find {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 80, :column 7, :end-line 80, :end-column 19, :arglists (quote ([w]))}, :name syllab/cluster-find, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 19, :method-params ([w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([w]))}, son-scale {:name syllab/son-scale, :file "target/classes/cljs/syllab.cljs", :line 69, :column 1, :end-line 69, :end-column 15, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 69, :column 6, :end-line 69, :end-column 15}}, sm4 {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 66, :column 7, :end-line 66, :end-column 10, :arglists (quote ([comp-m [v c]]))}, :name syllab/sm4, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 10, :method-params ([comp-m p__7642]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp-m [v c]]))}, syll-s {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 89, :column 7, :end-line 89, :end-column 13, :arglists (quote ([models w]))}, :name syllab/syll-s, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 13, :method-params ([models w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([models w]))}, vowcluster-pat {:name syllab/vowcluster-pat, :file "target/classes/cljs/syllab.cljs", :line 20, :column 1, :end-line 20, :end-column 20, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 20, :column 6, :end-line 20, :end-column 20}}, sm4-dict {:name syllab/sm4-dict, :file "target/classes/cljs/syllab.cljs", :line 32, :column 8, :end-line 32, :end-column 21, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 32, :column 13, :end-line 32, :end-column 21}}, sm3 {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 53, :column 7, :end-line 53, :end-column 10, :arglists (quote ([comp-m [v c]]))}, :name syllab/sm3, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 10, :method-params ([comp-m p__7639]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp-m [v c]]))}, vow-clusters-sep {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 86, :column 7, :end-line 86, :end-column 23, :arglists (quote ([word]))}, :name syllab/vow-clusters-sep, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 23, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, sm2 {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 45, :column 7, :end-line 45, :end-column 10, :arglists (quote ([comp-m [v c]]))}, :name syllab/sm2, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 10, :method-params ([comp-m p__7636]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp-m [v c]]))}, sm1 {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 38, :column 7, :end-line 38, :end-column 10, :arglists (quote ([comp-m [v c]]))}, :name syllab/sm1, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 10, :method-params ([comp-m p__7632]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp-m [v c]]))}, js-replace {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 77, :column 7, :end-line 77, :end-column 17, :arglists (quote ([fm v c &rest]))}, :name syllab/js-replace, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 17, :method-params ([fm v c &rest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fm v c &rest]))}, divide-cluster {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 83, :column 7, :end-line 83, :end-column 21, :arglists (quote ([w]))}, :name syllab/divide-cluster, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 21, :method-params ([w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([w]))}, sm4-check-concl {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/syllab.cljs", :line 56, :column 7, :end-line 56, :end-column 22, :arglists (quote ([c o]))}, :name syllab/sm4-check-concl, :variadic false, :file "target/classes/cljs/syllab.cljs", :end-column 22, :method-params ([c o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c o]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :b :a}, :order [:a :b :else]}, :doc nil}