;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{clone}, :name domina, :imports nil, :requires {goog.dom.forms goog.dom.forms, goog.dom goog.dom, goog.dom.classes goog.dom.classes, xml goog.dom.xml, dom goog.dom, classes goog.dom.classes, forms goog.dom.forms, goog.string goog.string, cljs.core cljs.core, support domina.support, events goog.events, string goog.string, domina.support domina.support, style goog.style, goog.style goog.style, cstring clojure.string, clojure.string clojure.string, goog.events goog.events, goog.dom.xml goog.dom.xml, core cljs.core}, :uses nil, :defs {re-tag-name {:name domina/re-tag-name, :file "resources/public/js/domina.cljs", :line 20, :column 1, :end-line 20, :end-column 17, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 20, :column 6, :end-line 20, :end-column 17}}, get-data {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 401, :column 7, :end-line 401, :end-column 15, :arglists (quote ([node key] [node key bubble])), :doc "Returns data associated with a node for a given key. Assumes\n  content is a single node. If the bubble parameter is set to true,\n  will search parent nodes if the key is not found.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([node key] [node key bubble]), :arglists ([node key] [node key bubble]), :arglists-meta (nil nil)}}, :name domina/get-data, :variadic false, :file "resources/public/js/domina.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([node key] [node key bubble]), :arglists ([node key] [node key bubble]), :arglists-meta (nil nil)}, :method-params ([node key] [node key bubble]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 401, :end-line 401, :max-fixed-arity 3, :fn-var true, :arglists ([node key] [node key bubble]), :doc "Returns data associated with a node for a given key. Assumes\n  content is a single node. If the bubble parameter is set to true,\n  will search parent nodes if the key is not found."}, string-to-dom {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 91, :column 8, :end-line 91, :end-column 21, :private true, :arglists (quote ([s]))}, :private true, :name domina/string-to-dom, :variadic false, :file "resources/public/js/domina.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, remove-extraneous-tbody! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 41, :column 8, :end-line 41, :end-column 32, :private true, :arglists (quote ([div html tag-name start-wrap]))}, :private true, :name domina/remove-extraneous-tbody!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 32, :method-params ([div html tag-name start-wrap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 4, :fn-var true, :arglists (quote ([div html tag-name start-wrap]))}, swap-content! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 184, :column 7, :end-line 184, :end-column 20, :arglists (quote ([old-content new-content])), :doc "Given some old content and some new content, replaces the old content with new content. If there are multiple nodes in the old content, replaces each of them and clones the new content as necessary."}, :name domina/swap-content!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 20, :method-params ([old-content new-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([old-content new-content])), :doc "Given some old content and some new content, replaces the old content with new content. If there are multiple nodes in the old content, replaces each of them and clones the new content as necessary."}, set-html! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 394, :column 7, :end-line 394, :end-column 16, :arglists (quote ([content inner-content])), :doc "Sets the innerHTML value for all the nodes in the given content."}, :name domina/set-html!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 16, :method-params ([content inner-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content inner-content])), :doc "Sets the innerHTML value for all the nodes in the given content."}, log {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 115, :column 7, :end-line 115, :end-column 10, :arglists (quote ([& mesg])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(mesg)], :arglists ([& mesg]), :arglists-meta (nil)}}, :name domina/log, :variadic true, :file "resources/public/js/domina.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(mesg)], :arglists ([& mesg]), :arglists-meta (nil)}, :method-params [(mesg)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 0, :fn-var true, :arglists ([& mesg])}, *debug* {:name domina/*debug*, :file "resources/public/js/domina.cljs", :line 110, :column 1, :end-line 110, :end-column 13, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 110, :column 6, :end-line 110, :end-column 13}}, set-value! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 356, :column 7, :end-line 356, :end-column 17, :arglists (quote ([content value])), :doc "Sets the value of all the nodes (presumably form fields) in the given content."}, :name domina/set-value!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 17, :method-params ([content value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content value])), :doc "Sets the value of all the nodes (presumably form fields) in the given content."}, set-style! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 221, :column 7, :end-line 221, :end-column 17, :arglists (quote ([content name & value])), :doc "Sets the value of a CSS property for each node in the content. Name may be a string or keyword. Value will be cast to a string, multiple values wil be concatenated.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(content name value)], :arglists ([content name & value]), :arglists-meta (nil)}}, :name domina/set-style!, :variadic true, :file "resources/public/js/domina.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(content name value)], :arglists ([content name & value]), :arglists-meta (nil)}, :method-params [(content name value)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 2, :fn-var true, :arglists ([content name & value]), :doc "Sets the value of a CSS property for each node in the content. Name may be a string or keyword. Value will be cast to a string, multiple values wil be concatenated."}, destroy-children! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 200, :column 7, :end-line 200, :end-column 24, :arglists (quote ([content])), :doc "Removes all the child nodes in a content from the DOM. Returns the original content."}, :name domina/destroy-children!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 24, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Removes all the child nodes in a content from the DOM. Returns the original content."}, lazy-nl-via-item {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 443, :column 8, :end-line 443, :end-column 24, :private true, :arglists (quote ([nl] [nl n])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([nl] [nl n]), :arglists ([nl] [nl n]), :arglists-meta (nil nil)}}, :private true, :name domina/lazy-nl-via-item, :variadic false, :file "resources/public/js/domina.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([nl] [nl n]), :arglists ([nl] [nl n]), :arglists-meta (nil nil)}, :method-params ([nl] [nl n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 2, :fn-var true, :arglists ([nl] [nl n])}, classes {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 321, :column 7, :end-line 321, :end-column 14, :arglists (quote ([content])), :doc "Returns a seq of all the CSS classes currently applied to a node. Assumes content is a single node."}, :name domina/classes, :variadic false, :file "resources/public/js/domina.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns a seq of all the CSS classes currently applied to a node. Assumes content is a single node."}, re-xhtml-tag {:name domina/re-xhtml-tag, :file "resources/public/js/domina.cljs", :line 19, :column 1, :end-line 19, :end-column 18, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 19, :column 6, :end-line 19, :end-column 18}}, has-class? {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 295, :column 7, :end-line 295, :end-column 17, :arglists (quote ([content class])), :doc "Returns true if the node has the specified CSS class. Assumes content is a single node."}, :name domina/has-class?, :variadic false, :file "resources/public/js/domina.cljs", :end-column 17, :method-params ([content class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content class])), :doc "Returns true if the node has the specified CSS class. Assumes content is a single node."}, set-attr! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 228, :column 7, :end-line 228, :end-column 16, :arglists (quote ([content name & value])), :doc "Sets the value of an HTML property for each node in the content. Name may be a string or keyword. Value will be cast to a string, multiple values wil be concatenated.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(content name value)], :arglists ([content name & value]), :arglists-meta (nil)}}, :name domina/set-attr!, :variadic true, :file "resources/public/js/domina.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(content name value)], :arglists ([content name & value]), :arglists-meta (nil)}, :method-params [(content name value)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists ([content name & value]), :doc "Sets the value of an HTML property for each node in the content. Name may be a string or keyword. Value will be cast to a string, multiple values wil be concatenated."}, text {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 339, :column 7, :end-line 339, :end-column 11, :arglists (quote ([content])), :doc "Returns the text of a node. Assumes content is a single node. For consistency across browsers, will always trim whitespace of the beginning and end of the returned text."}, :name domina/text, :variadic false, :file "resources/public/js/domina.cljs", :end-column 11, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns the text of a node. Assumes content is a single node. For consistency across browsers, will always trim whitespace of the beginning and end of the returned text."}, attr {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 216, :column 7, :end-line 216, :end-column 11, :arglists (quote ([content name])), :doc "Gets the value of an HTML attribute. Assumes content will be a single node. Name may be a stirng or keyword. Returns nil if there is no value set for the style."}, :name domina/attr, :variadic false, :file "resources/public/js/domina.cljs", :end-column 11, :method-params ([content name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content name])), :doc "Gets the value of an HTML attribute. Assumes content will be a single node. Name may be a stirng or keyword. Returns nil if there is no value set for the style."}, html {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 363, :column 7, :end-line 363, :end-column 11, :arglists (quote ([content])), :doc "Returns the innerHTML of a node. Assumes content is a single node."}, :name domina/html, :variadic false, :file "resources/public/js/domina.cljs", :end-column 11, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 363, :end-line 363, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns the innerHTML of a node. Assumes content is a single node."}, set-attrs! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 288, :column 7, :end-line 288, :end-column 17, :arglists (quote ([content attrs])), :doc "Sets the specified attributes for each node in the content, given a map of names and values. Names may be a string or keyword. Values will be cast to a string, multiple values wil be concatenated."}, :name domina/set-attrs!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 17, :method-params ([content attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content attrs])), :doc "Sets the specified attributes for each node in the content, given a map of names and values. Names may be a string or keyword. Values will be cast to a string, multiple values wil be concatenated."}, normalize-seq {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 477, :column 7, :end-line 477, :end-column 20, :arglists (quote ([list-thing])), :doc "Some versions of IE have things that are like arrays in that they\n  respond to .length, but are not arrays nor NodeSets. This returns a\n  real sequence view of such objects. If passed an object that is not\n  a logical sequence at all, returns a single-item seq containing the\n  object."}, :name domina/normalize-seq, :variadic false, :file "resources/public/js/domina.cljs", :end-column 20, :method-params ([list-thing]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 477, :end-line 477, :max-fixed-arity 1, :fn-var true, :arglists (quote ([list-thing])), :doc "Some versions of IE have things that are like arrays in that they\n  respond to .length, but are not arrays nor NodeSets. This returns a\n  real sequence view of such objects. If passed an object that is not\n  a logical sequence at all, returns a single-item seq containing the\n  object."}, DomContent {:meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 104, :column 14, :end-line 104, :end-column 24, :doc nil, :protocol-symbol true, :protocol-info {:methods {nodes [[content]], single-node [[nodeseq]]}}}, :protocol-symbol true, :name domina/DomContent, :file "resources/public/js/domina.cljs", :end-column 24, :column 1, :line 104, :protocol-info {:methods {nodes [[content]], single-node [[nodeseq]]}}, :info nil, :end-line 104, :impls #{default string}, :doc nil}, children {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 131, :column 7, :end-line 131, :end-column 15, :arglists (quote ([content])), :doc "Gets all the child nodes of the elements in a content. Same as (xpath content '*') but more efficient."}, :name domina/children, :variadic false, :file "resources/public/js/domina.cljs", :end-column 15, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Gets all the child nodes of the elements in a content. Same as (xpath content '*') but more efficient."}, destroy! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 195, :column 7, :end-line 195, :end-column 15, :arglists (quote ([content])), :doc "Removes all the nodes in a content from the DOM. Returns nil."}, :name domina/destroy!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 15, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Removes all the nodes in a content from the DOM. Returns nil."}, by-id {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 119, :column 7, :end-line 119, :end-column 12, :arglists (quote ([id])), :doc "Returns content containing a single node by looking up the given ID"}, :name domina/by-id, :variadic false, :file "resources/public/js/domina.cljs", :end-column 12, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns content containing a single node by looking up the given ID"}, set-text! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 344, :column 7, :end-line 344, :end-column 16, :arglists (quote ([content value])), :doc "Sets the text value of all the nodes in the given content."}, :name domina/set-text!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 16, :method-params ([content value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content value])), :doc "Sets the text value of all the nodes in the given content."}, restore-leading-whitespace! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 58, :column 8, :end-line 58, :end-column 35, :private true, :arglists (quote ([div html]))}, :private true, :name domina/restore-leading-whitespace!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 35, :method-params ([div html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([div html]))}, add-class! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 300, :column 7, :end-line 300, :end-column 17, :arglists (quote ([content class])), :doc "Adds the specified CSS class to each node in the content."}, :name domina/add-class!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 17, :method-params ([content class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content class])), :doc "Adds the specified CSS class to each node in the content."}, lazy-nl-via-array-ref {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 450, :column 8, :end-line 450, :end-column 29, :private true, :arglists (quote ([nl] [nl n])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([nl] [nl n]), :arglists ([nl] [nl n]), :arglists-meta (nil nil)}}, :private true, :name domina/lazy-nl-via-array-ref, :variadic false, :file "resources/public/js/domina.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([nl] [nl n]), :arglists ([nl] [nl n]), :arglists-meta (nil nil)}, :method-params ([nl] [nl n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 450, :end-line 450, :max-fixed-arity 2, :fn-var true, :arglists ([nl] [nl n])}, set-classes! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 326, :column 7, :end-line 326, :end-column 19, :arglists (quote ([content classes])), :doc "Sets the class attribute of the content nodes to classes, which can\n  be either a class attribute string or a seq of classname strings."}, :name domina/set-classes!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 19, :method-params ([content classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content classes])), :doc "Sets the class attribute of the content nodes to classes, which can\n  be either a class attribute string or a seq of classname strings."}, insert-before! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 172, :column 7, :end-line 172, :end-column 21, :arglists (quote ([content new-content])), :doc "Given a content and some new content, inserts the new content immediately before the reference content. If there is more than one node in the reference content, clones the new content for each one."}, :name domina/insert-before!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 21, :method-params ([content new-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content new-content])), :doc "Given a content and some new content, inserts the new content immediately before the reference content. If there is more than one node in the reference content, clones the new content for each one."}, remove-class! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 307, :column 7, :end-line 307, :end-column 20, :arglists (quote ([content class])), :doc "Removes the specified CSS class from each node in the content."}, :name domina/remove-class!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 20, :method-params ([content class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content class])), :doc "Removes the specified CSS class from each node in the content."}, detach! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 190, :column 7, :end-line 190, :end-column 14, :arglists (quote ([content])), :doc "Removes all the nodes in a content from the DOM and returns them."}, :name domina/detach!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Removes all the nodes in a content from the DOM and returns them."}, re-no-inner-html {:name domina/re-no-inner-html, :file "resources/public/js/domina.cljs", :line 21, :column 1, :end-line 21, :end-column 22, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 21, :column 6, :end-line 21, :end-column 22}}, value {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 351, :column 7, :end-line 351, :end-column 12, :arglists (quote ([content])), :doc "Returns the value of a node (presumably a form field). Assumes content is a single node."}, :name domina/value, :variadic false, :file "resources/public/js/domina.cljs", :end-column 12, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns the value of a node (presumably a form field). Assumes content is a single node."}, array-like? {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 471, :column 8, :end-line 471, :end-column 19, :private true, :arglists (quote ([obj]))}, :private true, :name domina/array-like?, :variadic false, :file "resources/public/js/domina.cljs", :end-column 19, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 471, :end-line 471, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, set-inner-html! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 374, :column 8, :end-line 374, :end-column 23, :private true, :arglists (quote ([content html-string]))}, :private true, :name domina/set-inner-html!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 23, :method-params ([content html-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content html-string]))}, insert-after! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 178, :column 7, :end-line 178, :end-column 20, :arglists (quote ([content new-content])), :doc "Given a content and some new content, inserts the new content immediately after the reference content. If there is more than one node in the reference content, clones the new content for each one."}, :name domina/insert-after!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 20, :method-params ([content new-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content new-content])), :doc "Given a content and some new content, inserts the new content immediately after the reference content. If there is more than one node in the reference content, clones the new content for each one."}, append! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 154, :column 7, :end-line 154, :end-column 14, :arglists (quote ([parent-content child-content])), :doc "Given a parent and child contents, appends each of the children to all of the parents. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content."}, :name domina/append!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 14, :method-params ([parent-content child-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent-content child-content])), :doc "Given a parent and child contents, appends each of the children to all of the parents. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content."}, html-to-dom {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 66, :column 7, :end-line 66, :end-column 18, :arglists (quote ([html])), :doc "takes an string of html and returns a NodeList of dom fragments"}, :name domina/html-to-dom, :variadic false, :file "resources/public/js/domina.cljs", :end-column 18, :method-params ([html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([html])), :doc "takes an string of html and returns a NodeList of dom fragments"}, single-node {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 106, :column 4, :end-line 106, :end-column 15, :protocol domina/DomContent, :doc "Returns the content as a single node (the first node, if the content contains more than one", :arglists (quote ([nodeseq]))}, :protocol domina/DomContent, :name domina/single-node, :variadic false, :file "resources/public/js/domina.cljs", :end-column 15, :method-params ([nodeseq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodeseq])), :doc "Returns the content as a single node (the first node, if the content contains more than one"}, insert! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 160, :column 7, :end-line 160, :end-column 14, :arglists (quote ([parent-content child-content idx])), :doc "Given a parent and child contents, appends each of the children to all of the parents at the specified index. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content."}, :name domina/insert!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 14, :method-params ([parent-content child-content idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 3, :fn-var true, :arglists (quote ([parent-content child-content idx])), :doc "Given a parent and child contents, appends each of the children to all of the parents at the specified index. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content."}, lazy-nodelist {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 457, :column 8, :end-line 457, :end-column 21, :private true, :arglists (quote ([nl])), :doc "A lazy seq view of a js/NodeList, or other array-like javascript things"}, :private true, :name domina/lazy-nodelist, :variadic false, :file "resources/public/js/domina.cljs", :end-column 21, :method-params ([nl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nl])), :doc "A lazy seq view of a js/NodeList, or other array-like javascript things"}, re-html {:name domina/re-html, :file "resources/public/js/domina.cljs", :line 17, :column 1, :end-line 17, :end-column 13, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 17, :column 6, :end-line 17, :end-column 13}}, set-styles! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 281, :column 7, :end-line 281, :end-column 18, :arglists (quote ([content styles])), :doc "Sets the specified CSS styles for each node in the content, given a map of names and values. Style names may be keywords or strings."}, :name domina/set-styles!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 18, :method-params ([content styles]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content styles])), :doc "Sets the specified CSS styles for each node in the content, given a map of names and values. Style names may be keywords or strings."}, log-debug {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 111, :column 7, :end-line 111, :end-column 16, :arglists (quote ([& mesg])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(mesg)], :arglists ([& mesg]), :arglists-meta (nil)}}, :name domina/log-debug, :variadic true, :file "resources/public/js/domina.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(mesg)], :arglists ([& mesg]), :arglists-meta (nil)}, :method-params [(mesg)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 0, :fn-var true, :arglists ([& mesg])}, remove-attr! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 235, :column 7, :end-line 235, :end-column 19, :arglists (quote ([content name])), :doc "Removes the specified HTML property for each node in the content. Name may be a string or keyword."}, :name domina/remove-attr!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 19, :method-params ([content name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content name])), :doc "Removes the specified HTML property for each node in the content. Name may be a string or keyword."}, apply-with-cloning {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 425, :column 8, :end-line 425, :end-column 26, :private true, :arglists (quote ([f parent-content child-content])), :doc "Takes a two-arg function, a reference DomContent and new\n  DomContent. Applies the function for each reference / content\n  combination. Uses clones of the new content for each additional\n  parent after the first."}, :private true, :name domina/apply-with-cloning, :variadic false, :file "resources/public/js/domina.cljs", :end-column 26, :method-params ([f parent-content child-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 425, :end-line 425, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f parent-content child-content])), :doc "Takes a two-arg function, a reference DomContent and new\n  DomContent. Applies the function for each reference / content\n  combination. Uses clones of the new content for each additional\n  parent after the first."}, re-leading-whitespace {:name domina/re-leading-whitespace, :file "resources/public/js/domina.cljs", :line 18, :column 1, :end-line 18, :end-column 27, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 18, :column 6, :end-line 18, :end-column 27}}, set-data! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 413, :column 7, :end-line 413, :end-column 16, :arglists (quote ([node key value])), :doc "Sets a data on the node for a given key. Assumes content is a\n  single node. Data should be ClojureScript values and data structures\n  only; using other objects as data may result in memory leaks on some\n  browsers."}, :name domina/set-data!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 16, :method-params ([node key value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 413, :end-line 413, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node key value])), :doc "Sets a data on the node for a given key. Assumes content is a\n  single node. Data should be ClojureScript values and data structures\n  only; using other objects as data may result in memory leaks on some\n  browsers."}, style {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 210, :column 7, :end-line 210, :end-column 12, :arglists (quote ([content name])), :doc "Gets the value of a CSS property. Assumes content will be a single node. Name may be a string or keyword. Returns nil if there is no value set for the style."}, :name domina/style, :variadic false, :file "resources/public/js/domina.cljs", :end-column 12, :method-params ([content name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content name])), :doc "Gets the value of a CSS property. Assumes content will be a single node. Name may be a string or keyword. Returns nil if there is no value set for the style."}, wrap-map {:name domina/wrap-map, :file "resources/public/js/domina.cljs", :line 26, :column 3, :end-line 26, :end-column 16, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 26, :column 8, :end-line 26, :end-column 16}}, parse-style-attributes {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 244, :column 7, :end-line 244, :end-column 29, :arglists (quote ([style])), :doc "Parses a CSS style string and returns the properties as a map."}, :name domina/parse-style-attributes, :variadic false, :file "resources/public/js/domina.cljs", :end-column 29, :method-params ([style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([style])), :doc "Parses a CSS style string and returns the properties as a map."}, nodes {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 105, :column 4, :end-line 105, :end-column 9, :protocol domina/DomContent, :doc "Returns the content as a sequence of nodes.", :arglists (quote ([content]))}, :protocol domina/DomContent, :name domina/nodes, :variadic false, :file "resources/public/js/domina.cljs", :end-column 9, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns the content as a sequence of nodes."}, toggle-class! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 314, :column 7, :end-line 314, :end-column 20, :arglists (quote ([content class])), :doc "Toggles the specified CSS class from each node in the content."}, :name domina/toggle-class!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 20, :method-params ([content class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content class])), :doc "Toggles the specified CSS class from each node in the content."}, clone {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 147, :column 7, :end-line 147, :end-column 12, :arglists (quote ([content])), :doc "Returns a deep clone of content."}, :name domina/clone, :variadic false, :file "resources/public/js/domina.cljs", :end-column 12, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns a deep clone of content."}, ancestor? {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 141, :column 7, :end-line 141, :end-column 16, :arglists (quote ([ancestor-content descendant-content])), :doc "Returns true if the first argument is an ancestor of the second argument. Presumes both arguments are single-node contents."}, :name domina/ancestor?, :variadic false, :file "resources/public/js/domina.cljs", :end-column 16, :method-params ([ancestor-content descendant-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ancestor-content descendant-content])), :doc "Returns true if the first argument is an ancestor of the second argument. Presumes both arguments are single-node contents."}, common-ancestor {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 136, :column 7, :end-line 136, :end-column 22, :arglists (quote ([& contents])), :doc "Returns the deepest common ancestor of the argument contents (which are presumed to be single nodes), or nil if they are from different documents.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(contents)], :arglists ([& contents]), :arglists-meta (nil)}}, :name domina/common-ancestor, :variadic true, :file "resources/public/js/domina.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(contents)], :arglists ([& contents]), :arglists-meta (nil)}, :method-params [(contents)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 0, :fn-var true, :arglists ([& contents]), :doc "Returns the deepest common ancestor of the argument contents (which are presumed to be single nodes), or nil if they are from different documents."}, replace-children! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 368, :column 8, :end-line 368, :end-column 25, :private true, :arglists (quote ([content inner-content]))}, :private true, :name domina/replace-children!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 25, :method-params ([content inner-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content inner-content]))}, prepend! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 166, :column 7, :end-line 166, :end-column 15, :arglists (quote ([parent-content child-content])), :doc "Given a parent and child contents, prepends each of the children to all of the parents. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content."}, :name domina/prepend!, :variadic false, :file "resources/public/js/domina.cljs", :end-column 15, :method-params ([parent-content child-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent-content child-content])), :doc "Given a parent and child contents, prepends each of the children to all of the parents. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content."}, styles {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 255, :column 7, :end-line 255, :end-column 13, :arglists (quote ([content])), :doc "Returns a map of the CSS styles/values. Assumes content will be a single node. Style names are returned as keywords."}, :name domina/styles, :variadic false, :file "resources/public/js/domina.cljs", :end-column 13, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns a map of the CSS styles/values. Assumes content will be a single node. Style names are returned as keywords."}, by-class {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 126, :column 7, :end-line 126, :end-column 15, :arglists (quote ([class-name])), :doc "Returns content containing nodes which have the specified CSS class."}, :name domina/by-class, :variadic false, :file "resources/public/js/domina.cljs", :end-column 15, :method-params ([class-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class-name])), :doc "Returns content containing nodes which have the specified CSS class."}, attrs {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 267, :column 7, :end-line 267, :end-column 12, :arglists (quote ([content])), :doc "Returns a map of the HTML attributes/values. Assumes content will be a single node. Attribute names are returned as keywords."}, :name domina/attrs, :variadic false, :file "resources/public/js/domina.cljs", :end-column 12, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns a map of the HTML attributes/values. Assumes content will be a single node. Attribute names are returned as keywords."}, re-tbody {:name domina/re-tbody, :file "resources/public/js/domina.cljs", :line 22, :column 1, :end-line 22, :end-column 14, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina.cljs", :line 22, :column 6, :end-line 22, :end-column 14}}}, :require-macros {dm domina.macros, domina.macros domina.macros}, :cljs.analyzer/constants {:seen #{:else :default}, :order [:default :else]}, :doc nil}