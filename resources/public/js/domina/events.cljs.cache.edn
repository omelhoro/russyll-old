;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name domina.events, :imports nil, :requires {domina domina, gobj goog.object, goog.object goog.object, events goog.events, goog.events goog.events}, :uses nil, :defs {target {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 11, :column 4, :end-line 11, :end-column 10, :protocol domina.events/Event, :doc "Returns the target of the event", :arglists (quote ([evt]))}, :protocol domina.events/Event, :name domina.events/target, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 10, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the target of the event"}, listen! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 54, :column 7, :end-line 54, :end-column 14, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the bubble phase. Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type listener] [content type listener]), :arglists ([type listener] [content type listener]), :arglists-meta (nil nil)}}, :name domina.events/listen!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type listener] [content type listener]), :arglists ([type listener] [content type listener]), :arglists-meta (nil nil)}, :method-params ([type listener] [content type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists ([type listener] [content type listener]), :doc "Add an event listener to each node in a DomContent. Listens for events during the bubble phase. Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element."}, dispatch-event-target! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 116, :column 7, :end-line 116, :end-column 29, :arglists (quote ([source evt])), :doc "Intended for internal/testing use only. Clients should prefer dispatch!. Dispatches an event using GClosure's event handling. The event source must extend goog.event.EventTarget"}, :name domina.events/dispatch-event-target!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 29, :method-params ([source evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source evt])), :doc "Intended for internal/testing use only. Clients should prefer dispatch!. Dispatches an event using GClosure's event handling. The event source must extend goog.event.EventTarget"}, event-type {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 13, :column 4, :end-line 13, :end-column 14, :protocol domina.events/Event, :doc "Returns the type of the the event", :arglists (quote ([evt]))}, :protocol domina.events/Event, :name domina.events/event-type, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 14, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the type of the the event"}, current-target {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 12, :column 4, :end-line 12, :end-column 18, :protocol domina.events/Event, :doc "Returns the object that had the listener attached", :arglists (quote ([evt]))}, :protocol domina.events/Event, :name domina.events/current-target, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 18, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the object that had the listener attached"}, root-element {:name domina.events/root-element, :file "resources/public/js/domina/events.cljs", :line 17, :column 1, :end-line 17, :end-column 18, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 17, :column 6, :end-line 17, :end-column 18}}, listen-once! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 66, :column 7, :end-line 66, :end-column 19, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the bubble phase. De-registers the listener after the first time it is invoked.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type listener] [content type listener]), :arglists ([type listener] [content type listener]), :arglists-meta (nil nil)}}, :name domina.events/listen-once!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type listener] [content type listener]), :arglists ([type listener] [content type listener]), :arglists-meta (nil nil)}, :method-params ([type listener] [content type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists ([type listener] [content type listener]), :doc "Add an event listener to each node in a DomContent. Listens for events during the bubble phase. De-registers the listener after the first time it is invoked.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element."}, ->t7268 {:protocol-inline nil, :meta {:anonymous true, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([create-listener-function f evt meta7269])), :file nil}, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :name domina.events/->t7268, :variadic false, :file "resources/public/js/domina/events.cljs", :method-params ([create-listener-function f evt meta7269]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :line 28, :max-fixed-arity 4, :fn-var true, :arglists (quote ([create-listener-function f evt meta7269])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, dispatch! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 127, :column 7, :end-line 127, :end-column 16, :arglists (quote ([type evt-map] [source type evt-map])), :doc "Dispatches an event of the given type, adding the values in event map to the event object. Optionally takes an event source. If none is provided, dispatches on the document's root element. Returns false if any handlers called prevent-default, otherwise true.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type evt-map] [source type evt-map]), :arglists ([type evt-map] [source type evt-map]), :arglists-meta (nil nil)}}, :name domina.events/dispatch!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type evt-map] [source type evt-map]), :arglists ([type evt-map] [source type evt-map]), :arglists-meta (nil nil)}, :method-params ([type evt-map] [source type evt-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 3, :fn-var true, :arglists ([type evt-map] [source type evt-map]), :doc "Dispatches an event of the given type, adding the values in event map to the event object. Optionally takes an event source. If none is provided, dispatches on the document's root element. Returns false if any handlers called prevent-default, otherwise true."}, capture! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 60, :column 7, :end-line 60, :end-column 15, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the capture phase.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type listener] [content type listener]), :arglists ([type listener] [content type listener]), :arglists-meta (nil nil)}}, :name domina.events/capture!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type listener] [content type listener]), :arglists ([type listener] [content type listener]), :arglists-meta (nil nil)}, :method-params ([type listener] [content type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists ([type listener] [content type listener]), :doc "Add an event listener to each node in a DomContent. Listens for events during the capture phase.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element."}, dispatch-browser! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 100, :column 7, :end-line 100, :end-column 24, :arglists (quote ([source evt])), :doc "Intended for internal/testing use only. Clients should prefer dispatch!. Dispatches an event as a simulated browser event from the given source node. Emulates capture/bubble behavior. Returns false if any handlers called prevent-default, otherwise true."}, :name domina.events/dispatch-browser!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 24, :method-params ([source evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source evt])), :doc "Intended for internal/testing use only. Clients should prefer dispatch!. Dispatches an event as a simulated browser event from the given source node. Emulates capture/bubble behavior. Returns false if any handlers called prevent-default, otherwise true."}, prevent-default {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 9, :column 4, :end-line 9, :end-column 19, :protocol domina.events/Event, :doc "Prevents the default action, for example a link redirecting to a URL", :arglists (quote ([evt]))}, :protocol domina.events/Event, :name domina.events/prevent-default, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 19, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Prevents the default action, for example a link redirecting to a URL"}, capture-once! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 72, :column 7, :end-line 72, :end-column 20, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the capture phase. De-registers the listener after the first time it is invoked.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type listener] [content type listener]), :arglists ([type listener] [content type listener]), :arglists-meta (nil nil)}}, :name domina.events/capture-once!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type listener] [content type listener]), :arglists ([type listener] [content type listener]), :arglists-meta (nil nil)}, :method-params ([type listener] [content type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists ([type listener] [content type listener]), :doc "Add an event listener to each node in a DomContent. Listens for events during the capture phase. De-registers the listener after the first time it is invoked.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element."}, listen-internal! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 45, :column 8, :end-line 45, :end-column 24, :private true, :arglists (quote ([content type listener capture once]))}, :private true, :name domina.events/listen-internal!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 24, :method-params ([content type listener capture once]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 5, :fn-var true, :arglists (quote ([content type listener capture once]))}, t7268 {:num-fields 4, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :name domina.events/t7268, :file "resources/public/js/domina/events.cljs", :type true, :anonymous true, :column 8, :line 28, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, Event {:meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 8, :column 14, :end-line 8, :end-column 19, :doc nil, :protocol-symbol true, :protocol-info {:methods {prevent-default [[evt]], stop-propagation [[evt]], target [[evt]], current-target [[evt]], event-type [[evt]], raw-event [[evt]]}}}, :protocol-symbol true, :name domina.events/Event, :file "resources/public/js/domina/events.cljs", :end-column 19, :column 1, :line 8, :protocol-info {:methods {prevent-default [[evt]], stop-propagation [[evt]], target [[evt]], current-target [[evt]], event-type [[evt]], raw-event [[evt]]}}, :info nil, :end-line 8, :impls #{domina.events/t7268 domina.events/t7265}, :doc nil}, t7265 {:num-fields 4, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :name domina.events/t7265, :file "resources/public/js/domina/events.cljs", :type true, :anonymous true, :column 8, :line 28, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, stop-propagation {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 10, :column 4, :end-line 10, :end-column 20, :protocol domina.events/Event, :doc "Stops event propagation", :arglists (quote ([evt]))}, :protocol domina.events/Event, :name domina.events/stop-propagation, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 20, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Stops event propagation"}, is-event-target? {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 121, :column 8, :end-line 121, :end-column 24, :private true, :arglists (quote ([o])), :doc "Tests whether the object is a goog.event.EventTarget"}, :private true, :name domina.events/is-event-target?, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 24, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc "Tests whether the object is a goog.event.EventTarget"}, create-listener-function {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 25, :column 8, :end-line 25, :end-column 32, :private true, :arglists (quote ([f]))}, :private true, :name domina.events/create-listener-function, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 32, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, get-listeners {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 142, :column 7, :end-line 142, :end-column 20, :arglists (quote ([content type])), :doc "Returns a sequence of event listeners for all the nodes in the\ncontent of a given type."}, :name domina.events/get-listeners, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 20, :method-params ([content type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content type])), :doc "Returns a sequence of event listeners for all the nodes in the\ncontent of a given type."}, raw-event {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 14, :column 4, :end-line 14, :end-column 13, :protocol domina.events/Event, :doc "Returns the original GClosure event", :arglists (quote ([evt]))}, :protocol domina.events/Event, :name domina.events/raw-event, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 13, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the original GClosure event"}, unlisten! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 78, :column 7, :end-line 78, :end-column 16, :arglists (quote ([] [content] [content type])), :doc "Removes event listeners from each node in the content. If a listener type is supplied, removes only listeners of that type. If content is omitted, it will remove listeners from the document's root element.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [content] [content type]), :arglists ([] [content] [content type]), :arglists-meta (nil nil nil)}}, :name domina.events/unlisten!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [content] [content type]), :arglists ([] [content] [content type]), :arglists-meta (nil nil nil)}, :method-params ([] [content] [content type]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists ([] [content] [content type]), :doc "Removes event listeners from each node in the content. If a listener type is supplied, removes only listeners of that type. If content is omitted, it will remove listeners from the document's root element."}, unlisten-by-key! {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 137, :column 7, :end-line 137, :end-column 23, :arglists (quote ([key])), :doc "Given a listener key, removes the listener."}, :name domina.events/unlisten-by-key!, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 23, :method-params ([key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key])), :doc "Given a listener key, removes the listener."}, ->t7265 {:protocol-inline nil, :meta {:anonymous true, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([create-listener-function f evt meta7266])), :file nil}, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :name domina.events/->t7265, :variadic false, :file "resources/public/js/domina/events.cljs", :method-params ([create-listener-function f evt meta7266]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :line 28, :max-fixed-arity 4, :fn-var true, :arglists (quote ([create-listener-function f evt meta7266])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, ancestor-nodes {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/resources/public/js/domina/events.cljs", :line 89, :column 8, :end-line 89, :end-column 22, :private true, :arglists (quote ([n] [n so-far])), :doc "Returns a seq of a node and its ancestors, starting with the document root.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n so-far]), :arglists ([n] [n so-far]), :arglists-meta (nil nil)}}, :private true, :name domina.events/ancestor-nodes, :variadic false, :file "resources/public/js/domina/events.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n so-far]), :arglists ([n] [n so-far]), :arglists-meta (nil nil)}, :method-params ([n] [n so-far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists ([n] [n so-far]), :doc "Returns a seq of a node and its ancestors, starting with the document root."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{meta7269 :private meta7266 evt create-listener-function quote :arglists f}, :order [create-listener-function :private :arglists quote f evt meta7266 meta7269]}, :doc nil}