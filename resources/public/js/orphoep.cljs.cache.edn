;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name orphoep, :imports nil, :requires {clojure.string clojure.string, ling-data ling-data}, :uses {e-rep-map ling-data}, :defs {deassim {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 120, :column 7, :end-line 120, :end-column 14, :arglists (quote ([cons modus]))}, :name orphoep/deassim, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 14, :method-params ([cons modus]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cons modus]))}, dubcon-pat {:name orphoep/dubcon-pat, :file "target/classes/cljs/orphoep.cljs", :line 169, :column 1, :end-line 169, :end-column 16, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 169, :column 6, :end-line 169, :end-column 16}}, ogo-pat {:name orphoep/ogo-pat, :file "target/classes/cljs/orphoep.cljs", :line 148, :column 1, :end-line 148, :end-column 13, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 148, :column 6, :end-line 148, :end-column 13}}, excp-ogo {:name orphoep/excp-ogo, :file "target/classes/cljs/orphoep.cljs", :line 147, :column 1, :end-line 147, :end-column 14, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 147, :column 6, :end-line 147, :end-column 14}}, dubcon-alg {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 170, :column 7, :end-line 170, :end-column 17, :arglists (quote ([w [m m1]]))}, :name orphoep/dubcon-alg, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 17, :method-params ([w p__7617]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w [m m1]]))}, deassim-con {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 110, :column 7, :end-line 110, :end-column 18, :arglists (quote ([con modus]))}, :name orphoep/deassim-con, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 18, :method-params ([con modus]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([con modus]))}, end-assim {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 98, :column 7, :end-line 98, :end-column 16, :arglists (quote ([word]))}, :name orphoep/end-assim, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 16, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, reg-assim-repl {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 126, :column 7, :end-line 126, :end-column 21, :arglists (quote ([word]))}, :name orphoep/reg-assim-repl, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 21, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, cluster-assim-patts {:name orphoep/cluster-assim-patts, :file "target/classes/cljs/orphoep.cljs", :line 64, :column 1, :end-line 64, :end-column 25, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 64, :column 6, :end-line 64, :end-column 25}}, ogo-ovo {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 149, :column 7, :end-line 149, :end-column 14, :arglists (quote ([word])), :doc "Cases like [дорого, дорогого большого никого строго]. But exceptions like [дорого много строго]"}, :name orphoep/ogo-ovo, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 14, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Cases like [дорого, дорогого большого никого строго]. But exceptions like [дорого много строго]"}, cluster-assim {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 74, :column 7, :end-line 74, :end-column 20, :arglists (quote ([word]))}, :name orphoep/cluster-assim, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 20, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, cluster-assim-test {:name orphoep/cluster-assim-test, :file "target/classes/cljs/orphoep.cljs", :line 63, :column 1, :end-line 63, :end-column 24, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 63, :column 6, :end-line 63, :end-column 24}}, dash-rep {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 166, :column 7, :end-line 166, :end-column 15, :arglists (quote ([word]))}, :name orphoep/dash-rep, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 15, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, fns {:name orphoep/fns, :file "target/classes/cljs/orphoep.cljs", :line 192, :column 1, :end-line 192, :end-column 9, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 192, :column 6, :end-line 192, :end-column 9}}, chto-trans {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 161, :column 7, :end-line 161, :end-column 17, :arglists (quote ([word]))}, :name orphoep/chto-trans, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 17, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, rus-cons {:name orphoep/rus-cons, :file "target/classes/cljs/orphoep.cljs", :line 168, :column 1, :end-line 168, :end-column 14, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 168, :column 6, :end-line 168, :end-column 14}}, reg-pal-pat {:name orphoep/reg-pal-pat, :file "target/classes/cljs/orphoep.cljs", :line 138, :column 1, :end-line 138, :end-column 17, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 138, :column 6, :end-line 138, :end-column 17}}, orpho-single {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 194, :column 16, :end-line 194, :end-column 28, :export true, :arglists (quote ([word]))}, :name orphoep/orpho-single, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 28, :method-params ([word]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, replace-patt {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 13, :column 7, :end-line 13, :end-column 19, :arglists (quote ([val [pat rep]]))}, :name orphoep/replace-patt, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 19, :method-params ([val p__7601]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([val [pat rep]]))}, neutral-cons {:name orphoep/neutral-cons, :file "target/classes/cljs/orphoep.cljs", :line 91, :column 1, :end-line 91, :end-column 18, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 91, :column 6, :end-line 91, :end-column 18}}, -- {:name orphoep/--, :file "target/classes/cljs/orphoep.cljs", :line 9, :column 1, :end-line 9, :end-column 8, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 9, :column 6, :end-line 9, :end-column 8}}, devoice {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 94, :column 7, :end-line 94, :end-column 14, :arglists (quote ([word islast]))}, :name orphoep/devoice, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 14, :method-params ([word islast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([word islast]))}, unpal-e {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 27, :column 7, :end-line 27, :end-column 14, :arglists (quote ([word & [lemma]])), :doc "Cases like [шт*ейгер брет*елька модерн денди дельта]", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(word [lemma])], :arglists ([word & [lemma]]), :arglists-meta (nil)}}, :name orphoep/unpal-e, :variadic true, :file "target/classes/cljs/orphoep.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(word [lemma])], :arglists ([word & [lemma]]), :arglists-meta (nil)}, :method-params [(word [lemma])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists ([word & [lemma]]), :doc "Cases like [шт*ейгер брет*елька модерн денди дельта]"}, dubcon {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 187, :column 7, :end-line 187, :end-column 13, :arglists (quote ([word])), :doc "Cases like [грамм русский аккуратный коммунист рассада]"}, :name orphoep/dubcon, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 13, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Cases like [грамм русский аккуратный коммунист рассада]"}, hard-pron-patts {:name orphoep/hard-pron-patts, :file "target/classes/cljs/orphoep.cljs", :line 39, :column 1, :end-line 39, :end-column 21, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 39, :column 6, :end-line 39, :end-column 21}}, reg-pal {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 139, :column 7, :end-line 139, :end-column 14, :arglists (quote ([word])), :doc "Words like [здесь, зонтик истинный все творец]"}, :name orphoep/reg-pal, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 14, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Words like [здесь, зонтик истинный все творец]"}, cons-2 {:name orphoep/cons-2, :file "target/classes/cljs/orphoep.cljs", :line 89, :column 1, :end-line 89, :end-column 12, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 89, :column 6, :end-line 89, :end-column 12}}, reg-assim {:name orphoep/reg-assim, :file "target/classes/cljs/orphoep.cljs", :line 75, :column 1, :end-line 75, :end-column 15, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 75, :column 6, :end-line 75, :end-column 15}}, hard-pron {:protocol-inline nil, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 57, :column 7, :end-line 57, :end-column 16, :arglists (quote ([word])), :doc "Cases like [солнце сердце поздно честный]"}, :name orphoep/hard-pron, :variadic false, :file "target/classes/cljs/orphoep.cljs", :end-column 16, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Cases like [солнце сердце поздно честный]"}, stress-sign {:name orphoep/stress-sign, :file "target/classes/cljs/orphoep.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 8, :column 6, :end-line 8, :end-column 17}}, reg-assim-pat {:name orphoep/reg-assim-pat, :file "target/classes/cljs/orphoep.cljs", :line 109, :column 1, :end-line 109, :end-column 19, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 109, :column 6, :end-line 109, :end-column 19}}, vl-cons {:name orphoep/vl-cons, :file "target/classes/cljs/orphoep.cljs", :line 92, :column 1, :end-line 92, :end-column 13, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 92, :column 6, :end-line 92, :end-column 13}}, vd-cons {:name orphoep/vd-cons, :file "target/classes/cljs/orphoep.cljs", :line 90, :column 1, :end-line 90, :end-column 13, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 90, :column 6, :end-line 90, :end-column 13}}, ++ {:name orphoep/++, :file "target/classes/cljs/orphoep.cljs", :line 10, :column 1, :end-line 10, :end-column 8, :meta {:file "/home/igorf/workspace/private/clojure/websyll/target/classes/cljs/orphoep.cljs", :line 10, :column 6, :end-line 10, :end-column 8}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}